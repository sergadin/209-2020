#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <string>
#include <sstream>
#include <ctype.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/poll.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <cstring>
#include <iomanip>
#include <limits>
#include <vector>

using namespace std;

#define PORT    7373
#define BUFLEN  1024
#define EXIT_FAILURE 1

int readFromClient(int fd, char *buf, vector<char*> All_names, vector<float*> All_matrix);
void  writeToClient(int fd, const char *buf);

int Length(int fd);
int String_check(int fd, int len, int &i, int &nbytes, char* buf);
int Matrix_check(int fd, int len, int &i, int &nbytes, float* buf);
int choose(char* name, vector<char*> All_names);

float* mult(float *arr, float *arr_v, int rows, int cols);

std::string double_to_string(const double value);


int  main(void)
{

	int     i, err, opt = 1;
	int     sock, new_sock;
	struct  sockaddr_in  addr;
	struct  sockaddr_in  client;
	char    buf[BUFLEN];
	socklen_t  size;

    vector<char*> All_names(100);
    vector<float*> All_matrix(100);

	sock = socket(PF_INET, SOCK_STREAM, 0);
	if (sock < 0)
	{
		perror("Server: cannot create socket");
		exit(EXIT_FAILURE);
	}
	setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (const void*)&opt, sizeof(opt));

	addr.sin_family = AF_INET;
	addr.sin_port = htons(PORT);
	addr.sin_addr.s_addr = htonl(INADDR_ANY);

	err = bind(sock, (struct sockaddr*)&addr, sizeof(addr));
	if (err < 0)
	{
		perror("Server: cannot bind socket");
		exit(EXIT_FAILURE);
	}

	err = listen(sock, 5);
	if (err < 0)
	{
		perror("Server: listen queue failure");
		exit(EXIT_FAILURE);
	}


	pollfd  act_set[100];
	act_set[0].fd = sock;
	act_set[0].events = POLLIN;
	act_set[0].revents = 0;
	int num_set = 1;



	while (1)
	{
		int ret = poll(act_set, num_set, -1);
		if (ret < 0) {
			perror("Server: poll  failure");
			exit(EXIT_FAILURE);
		}
		if (ret > 0) {
			for (i = 0; i < num_set; i++)
			{
				if (act_set[i].revents & POLLIN)
				{
					printf("get POLLIN at fd %d\n", act_set[i].fd);
					act_set[i].revents &= ~POLLIN;
					if (i == 0)
					{
						new_sock = accept(act_set[i].fd, (struct sockaddr*)&client, &size);
						printf("new client at port %u\n", ntohs(client.sin_port));
						if (num_set < 100)
						{
							act_set[num_set].fd = new_sock;
							act_set[num_set].events = POLLIN;
							act_set[num_set].revents = 0;
							num_set++;
						}
						else
						{
							printf("no more sockets for client");
							close(new_sock);
						}
					}
					else
					{
						bzero(buf, sizeof(buf));
						err = readFromClient(act_set[i].fd, buf, All_names, All_matrix);
						printf("%d [%s] %p\n", err, buf, strstr(buf, "stop"));

						if (err < 0 || strstr(buf, "stop"))
						{
							close(act_set[i].fd);
							if (i < num_set - 1)
							{
								act_set[i] = act_set[num_set - 1];
								num_set--;
								i--;
							}
						}
					}
				}
			}
		}
	}
}



int Matrix_check(int fd, int len, int &i, int &nbytes, float* buf)
{
    for (i = 0; len > 0; i += nbytes, len -= nbytes)
    {
        nbytes = read(fd, buf + i, len);
		if (nbytes < 0)
		{
			perror("Possible read error\n");
			return -1;
		}
		else if (!nbytes)
		{
			perror("Data error\n");
			return -1;
		}
	}
	return 0;
}

int String_check(int fd, int len, int &i, int &nbytes, char* buf)
{

	for (i = 0; len > 0; i += nbytes, len -= nbytes)
	{
		nbytes = read(fd, buf + i, len);
		if (nbytes < 0)
		{
			perror("Possible read error\n");
			return -1;
		}
		else if (!nbytes)
		{
			perror("Data error\n");
			return -1;
		}
	}
	return 0;

}

int Length(int fd)
{
	int len;
	if (read(fd, &len, sizeof(int)) != (int)sizeof(int))
	{
		perror("Data error\n");
		return -1;
	}
	return len;
}


int readFromClient(int fd, char *buf, vector<char*> All_names, vector<float*> All_matrix)
{
	int nbytes, len, i;
	int N, M, c, n;
	int v_len = -1;


	len = Length(fd);
	if (len == -1) return -1;

	if (String_check(fd, len, i, nbytes, buf) == -1) return -1;

	if (!i)
	{
		perror("no data\n");
		return -1;
	}
	else
	{
		printf("(%2d): %s\n", fd, buf);

		if (strcmp(buf, "put") == 0)
		{
			writeToClient(fd, "Input matrix name: ");
			bzero(buf, sizeof(buf));
			len = Length(fd);
			if (len == -1) return -1;

            char name[50];
			if (String_check(fd, len, i, nbytes, name) == -1) return -1;

			writeToClient(fd, "Input number of rows: ");
			N = Length(fd);
			if (N == -1) return -1;

			writeToClient(fd, "Input number of columns: ");
			M = Length(fd);
			if (M == -1) return -1;

			writeToClient(fd, "Input matrix: ");

			len = Length(fd);
			if (len == -1) return -1;


			float matrix[N*M+2];
			matrix[0] = N;
			matrix[1] = M;
			if (Matrix_check(fd, len, i, nbytes, matrix+2) == -1) return -1;


			All_matrix.push_back(matrix);
			All_names.push_back (name);
        }

        if (strcmp(buf, "send") == 0)
		{
			writeToClient(fd, "Input vector length: ");
			bzero(buf, sizeof(buf));

			v_len = Length(fd);
			if (v_len == -1) return -1;

			writeToClient(fd, "Input vector: ");

			len = Length(fd);
			if (len == -1) return -1;

			float vect[v_len];
			if (Matrix_check(fd, v_len, i, nbytes, vect) == -1) return -1;

			writeToClient(fd, "If u want to continue input command or input exit");

			len = Length(fd);
            if (len == -1) return -1;

            if (String_check(fd, len, i, nbytes, buf) == -1) return -1;
            if (!i)
            {
                perror("no data\n");
                return -1;
            }

			if (strcmp(buf, "list") == 0)
            {
                bzero(buf, sizeof(buf));

                for (int j = 0; j < All_names.size(); j++)
                {
                    if (All_matrix[j][1] == v_len) writeToClient(fd, All_names[j]);
                }

                writeToClient(fd, "If u want to continue input command or input exit");

                len = Length(fd);
                if (len == -1) return -1;

                if (String_check(fd, len, i, nbytes, buf) == -1) return -1;
                if (!i)
                {
                    perror("no data\n");
                    return -1;
                }
            }

			if (strcmp(buf, "mult") == 0)
            {
                writeToClient(fd, "Input matrix name: ");
                bzero(buf, sizeof(buf));
                len = Length(fd);
                if (len == -1) return -1;

                char find_name[50];
                if (String_check(fd, len, i, nbytes, find_name) == -1) return -1;

                c = choose (find_name, All_names);
                if (c == -1)
                {
                    perror("Wrong name\n");
                    return -1;
                }

                float* matr = All_matrix[c];

                N = All_matrix[c][0];
                M = All_matrix[c][1];
                if (M != v_len)
                {
                    perror ("Unvailable operation\n");
                    return -1;
                }
                float* res = mult(matr, vect, N, M);

                for (int j = 0; j < N; j++)
                {
                    if (j % N == 0) printf("\n");
                    printf("%f(%i) ", res[j], j);
                }
            }
        }

		if (strcmp(buf, "list") == 0)
		{
            bzero(buf, sizeof(buf));

            for (int j = 0; j < All_names.size(); j++)
            {
                writeToClient(fd, All_names[j]);
            }
		}
		return 0;
	}
}

int choose(char* name, vector<char*> All_names)
{
    for (int i = 0; i < All_names.size(); i++)
    {
        if (strcmp(name, All_names[i]) == 0)
        {
            return i;
        }
    }
return -1;
}



void  writeToClient(int fd, const char *buf)
{
	int  nbytes;

	nbytes = write(fd, buf, strlen(buf));
	fprintf(stdout, "Write back: %s\nnbytes=%d\n", buf, nbytes);

	if (nbytes < 0)
	{
		perror("Server: write failure");
	}
}

float* mult(float *arr, float *arr_v, int rows, int cols)
{
	float arr_new[rows];
	int i, j;
	for (i = 0; i < rows; i++)
	{
		arr_new[i] = 0;
	}

	for (i = 0; i < rows; i++)
	{
		for (j = 0; j < cols; j++)
		{
			arr_new[i] += arr[i * cols + j] * arr_v[j];
		}
	}
	for (i = 0; i < rows; i++) arr_v[i] = arr_new[i];
	return arr_v;
}
